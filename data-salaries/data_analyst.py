# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wjHJ6-Vt-i3ohcw_ScOGwWd44DsE2GVU

# **Preliminary Data Exploration and Data Cleaning with Pandas**
"""

import pandas as pd
df = pd.read_csv('salaries_by_college_major.csv')
df.head()

df.shape

df.columns

df.isna()

df.tail()

clean_df = df.dropna()
clean_df.tail()

"""# **Accessing Columns and Individual Cells in a Dataframe**"""

clean_df['Starting Median Salary']

clean_df['Starting Median Salary'].max()

clean_df['Starting Median Salary'].idxmax()

clean_df['Undergraduate Major'].loc[43]

clean_df.loc[43]

"""# **Highest and Lowest Earning Degrees**"""

print(clean_df['Mid-Career Median Salary'].max())

print(f"Index for the max mid career salary: {clean_df['Mid-Career Median Salary'].idxmax()}")

clean_df['Undergraduate Major'][8]

print(clean_df['Starting Median Salary'].min())

clean_df['Undergraduate Major'].loc[clean_df['Starting Median Salary'].idxmin()]

clean_df.loc[clean_df['Mid-Career Median Salary'].idxmin()]

"""# **Sorting Values & Adding Columns: Majors with the Most Potential vs Lowest Risk**"""

clean_df['Mid-Career 90th Percentile Salary'].subtract(clean_df['Mid-Career 10th Percentile Salary'])

spread_col = clean_df['Mid-Career 90th Percentile Salary'].subtract(clean_df['Mid-Career 10th Percentile Salary'])

clean_df.insert(1, 'Spread', spread_col)

clean_df.head()

low_risk = clean_df.sort_values('Spread')

low_risk[['Undergraduate Major', 'Spread']].head()

"""# **Degrees with the Highest Potential**"""

highest_potential = clean_df.sort_values('Mid-Career 90th Percentile Salary', ascending=False)
highest_potential[['Undergraduate Major', 'Mid-Career 90th Percentile Salary']].head()

highest_spread = clean_df.sort_values('Spread', ascending=False)
highest_spread[['Undergraduate Major', 'Spread']].head()

"""# **Grouping and Pivoting Data with Pandas**"""

clean_df.groupby('Group').count()

clean_df.groupby('Group').mean()

pd.options.display.float_format = '{:,.2f}'.format
clean_df.groupby('Group').mean()